#!/usr/sbin/nft -f
flush ruleset

define pub_iface = {{ public_iface }}
define wg_iface = {{ wireguard_iface }}
define wg_port = 51820
define docker_subnet = 172.17.0.0/24

table inet filter {
    chain input {
        type filter hook input priority 0; policy drop;

        # accept all loopback packets
        iif "lo" accept
        # accept all icmp/icmpv6 packets
        meta l4proto { icmp, ipv6-icmp } accept
        # accept all packets that are part of an already-established connection
        ct state vmap { invalid : drop, established : accept, related : accept }
        # drop new connections over rate limit, protect before DDOS attack
        ct state new limit rate over 100/second burst 10 packets drop
        # accept all DHCPv6 packets received at a link-local address
        ip6 daddr fe80::/64 udp dport dhcpv6-client accept
        # accept all SSH packets received on a public interface
        iifname $pub_iface tcp dport ssh accept
        # accept all WireGuard packets received on a public interface
        iifname $pub_iface udp dport $wg_port counter accept
        iifname $pub_iface tcp dport {8001, 8002} counter accept 
        iifname $wg_iface udp dport { {{ server_in_ports.udp | join(',') }} } counter accept
        iifname $wg_iface tcp dport { {{ server_in_ports.tcp | join(',') }} } counter accept
        # reject with polite "port unreachable" icmp response

        # akceptowanie polaczen na serwer OVH - lokalnie
        iifname $pub_iface tcp dport {http, https, 3389} counter accept
        reject
    }
    chain output {
        type filter hook output priority 0; policy accept;
    }

    chain forward {
        type filter hook forward priority 0; policy drop;
        
        # forward all packets that are part of an already-established connection
        ct state vmap { invalid : drop, established : accept, related : accept }
        # forward any incoming packets from a public interface that will go out through WireGuard
        iifname $wg_iface oifname $pub_iface accept

        iifname $pub_iface tcp dport { {{ tcp_peer_ports }} } accept
        iifname $pub_iface udp dport { {{ udp_peer_ports }} } accept

        # Allow all traffic from ens3 to docker_subnet
        iifname $pub_iface ip daddr $docker_subnet counter accept
         # Allow all traffic from docker0 to ens3
        ip saddr $docker_subnet oifname $pub_iface counter accept

        # Allow all traffic from wg0 to docker0
        iifname $wg_iface ip daddr $docker_subnet counter accept
         # Allow all traffic from docker0 to wg0
        ip saddr $docker_subnet oifname $wg_iface counter accept

        # Allow traffic between containers in docker network
        ip saddr $docker_subnet ip daddr $docker_subnet counter accept

        # reject with polite "host unreachable" icmp response
        reject with icmpx type host-unreachable
    }
}
table inet nat {
    chain prerouting {
        type nat hook prerouting priority -100; policy accept;
        ###############################################
        # TU ROBIONY JEST PORTFORWARDING
        ###############################################
        {% for item in forwarded_ports %}
        iifname $pub_iface {{ item.protocol }} dport {{ item.vpn_server_port }} dnat ip to {{ wireguard_peer_ipv4 }}:{{ item.peer_port }}
        {% endfor %}
    }
    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        # masquerade all packets going out through WireGuard
        oifname $wg_iface masquerade
    }
}